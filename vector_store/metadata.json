[
  {
    "file": "./cloned_repo2/index.js",
    "start_line": 1,
    "end_line": 20,
    "content": "document.getElementById('playlist-form').addEventListener('submit', async function (event) {\n    event.preventDefault();\n    \n    // Get the playlist URL from the form\n    const playlistUrl = document.getElementById('playlist').value;\n\n    // Make a GET request to the backend with the playlist URL as a query parameter\n  const response = await fetch(`http://127.0.0.1:5000/get_music?playlist=${encodeURIComponent(playlistUrl)}`, {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n\n    const data = await response.json();\n    console.log(data);\n\n\n    // Populate the music list checkboxes"
  },
  {
    "file": "./cloned_repo2/index.js",
    "start_line": 16,
    "end_line": 35,
    "content": "const data = await response.json();\n    console.log(data);\n\n\n    // Populate the music list checkboxes\n    const musicListDiv = document.getElementById('music-list');\n    musicListDiv.innerHTML = '';  // Clear previous content\n    data.forEach((song, index) => {\n        const checkbox = document.createElement('input');\n        checkbox.type = 'checkbox';\n        checkbox.classList.add('song-checkbox');\n        checkbox.name = `${song.track_name}`;\n        checkbox.value = song[\"track_uri\"];\n        checkbox.id = `song-${index}`;\n\n        const label = document.createElement('label');\n        label.htmlFor = `song-${index}`;\n        label.textContent = `${song.track_name} by ${song.artist_name}`;\n\n        const br = document.createElement('br');"
  },
  {
    "file": "./cloned_repo2/index.js",
    "start_line": 31,
    "end_line": 50,
    "content": "const label = document.createElement('label');\n        label.htmlFor = `song-${index}`;\n        label.textContent = `${song.track_name} by ${song.artist_name}`;\n\n        const br = document.createElement('br');\n\n        musicListDiv.appendChild(checkbox);\n        musicListDiv.appendChild(label);\n        musicListDiv.appendChild(br);\n    });\n});\n\ndocument.getElementById('select-all').addEventListener('click', function () {\n    const checkboxes = document.querySelectorAll('#music-list input[type=\"checkbox\"]');\n    checkboxes.forEach(checkbox => checkbox.checked = true);\n});\n\ndocument.getElementById('deselect-all').addEventListener('click', function () {\n    const checkboxes = document.querySelectorAll('#music-list input[type=\"checkbox\"]');\n    checkboxes.forEach(checkbox => checkbox.checked = false);"
  },
  {
    "file": "./cloned_repo2/index.js",
    "start_line": 46,
    "end_line": 65,
    "content": "});\n\ndocument.getElementById('deselect-all').addEventListener('click', function () {\n    const checkboxes = document.querySelectorAll('#music-list input[type=\"checkbox\"]');\n    checkboxes.forEach(checkbox => checkbox.checked = false);\n});\n\n\ndocument.getElementById('download-selected').addEventListener('click', async function () {\n    event.preventDefault();\n    const checkboxes=document.querySelectorAll('#music-list input[type=\"checkbox\"]');\n    const selectedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);\n    const selectedSongs = selectedCheckboxes.map(checkbox => checkbox.name);\n    console.log(selectedSongs);\n    console.log(selectedCheckboxes);\n    checkboxes.forEach(checkbox => checkbox.checked = false);\n    for (const song of selectedSongs) {\n         \n\n        const response = await fetch('http://127.0.0.1:5000/download', {"
  },
  {
    "file": "./cloned_repo2/index.js",
    "start_line": 61,
    "end_line": 80,
    "content": "checkboxes.forEach(checkbox => checkbox.checked = false);\n    for (const song of selectedSongs) {\n         \n\n        const response = await fetch('http://127.0.0.1:5000/download', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ song: song })\n        })\n        .then(response => response.blob())\n        .then(blob => {\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `${song}.mp3`;\n            document.body.appendChild(a);\n            a.click();\n            a.remove();"
  },
  {
    "file": "./cloned_repo2/index.js",
    "start_line": 76,
    "end_line": 87,
    "content": "a.href = url;\n            a.download = `${song}.mp3`;\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n            console.log(blob);\n            console.log(\"mediafile\");\n        });\n    }\n\n\n});"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 1,
    "end_line": 20,
    "content": "import spotipy\nfrom spotipy.oauth2 import SpotifyOAuth\nimport requests\nfrom bs4 import BeautifulSoup\nimport youtube_dl\nfrom youtube_search import YoutubeSearch\nimport json\nimport flask\nfrom flask import Flask, request, jsonify, send_file\nfrom flask_cors import CORS\nimport yt_dlp\n\n# Load environment variables from .env file\nimport os\nimport io\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 16,
    "end_line": 35,
    "content": "from dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nclient_Id = os.getenv(\"SPOTIFY_CLIENT_ID\")\nclient_Secret = os.getenv(\"SPOTIFY_CLIENT_SECRET\")\nredirect_Uri = os.getenv(\"REDIRECT_URI\")\nprint(client_Id, client_Secret, redirect_Uri)\n\nsp = spotipy.Spotify(\n    auth_manager=SpotifyOAuth(\n        client_id=client_Id,\n        client_secret=client_Secret,\n        redirect_uri=redirect_Uri,\n        scope=\"playlist-read-private\",\n    )\n)\n\napp = flask.Flask(__name__)"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 31,
    "end_line": 50,
    "content": "scope=\"playlist-read-private\",\n    )\n)\n\napp = flask.Flask(__name__)\n# playlist_link = \"https://open.spotify.com/playlist/4bcVnuc14zM9z2WJyQMOaD?si=Pf6CfFgbSwq3LI89U2Triw\"\n\nCORS(app)\n\n\n@app.route(\"/get_music\", methods=[\"GET\"])\ndef get_music():\n    playlist_link = request.args.get(\"playlist\")\n    playlist_URI = playlist_link.split(\"/\")[-1].split(\"?\")[0]\n    track_uris = [x[\"track\"][\"uri\"] for x in sp.playlist_tracks(playlist_URI)[\"items\"]]\n\n    if not playlist_URI:\n        return jsonify({\"error\": \"No playlist URI provided\"}), 400\n    music_data = []"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 46,
    "end_line": 65,
    "content": "if not playlist_URI:\n        return jsonify({\"error\": \"No playlist URI provided\"}), 400\n    music_data = []\n\n    for track in sp.playlist_tracks(playlist_URI)[\"items\"]:\n        # URI\n        track_uri = track[\"track\"][\"uri\"]\n\n        # Track name\n        track_name = track[\"track\"][\"name\"]\n\n        # Main Artist\n        artist_uri = track[\"track\"][\"artists\"][0][\"uri\"]\n        artist_info = sp.artist(artist_uri)\n\n        # Name, popularity, genre\n        artist_name = track[\"track\"][\"artists\"][0][\"name\"]\n        artist_pop = artist_info[\"popularity\"]\n        artist_genres = artist_info[\"genres\"]"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 61,
    "end_line": 80,
    "content": "# Name, popularity, genre\n        artist_name = track[\"track\"][\"artists\"][0][\"name\"]\n        artist_pop = artist_info[\"popularity\"]\n        artist_genres = artist_info[\"genres\"]\n\n        # Album\n        album = track[\"track\"][\"album\"][\"name\"]\n\n        # Popularity of the track\n        track_pop = track[\"track\"][\"popularity\"]\n\n        # Append track data to the list\n        music_data.append(\n            {\n                \"track_uri\": track_uri,\n                \"track_name\": track_name,\n                \"artist_name\": artist_name,\n                \"artist_popularity\": artist_pop,\n                \"artist_genres\": artist_genres,"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 76,
    "end_line": 95,
    "content": "\"track_uri\": track_uri,\n                \"track_name\": track_name,\n                \"artist_name\": artist_name,\n                \"artist_popularity\": artist_pop,\n                \"artist_genres\": artist_genres,\n                \"album\": album,\n                \"track_popularity\": track_pop,\n            }\n        )\n\n    return json.dumps(music_data, indent=4)\n\n\ndef download_mp3(youtube_url):\n    # Specify the output directory where you want to save the media files\n    output_dir = \"musik\"  # Make sure this directory exists or create it\n\n    # Ensure output directory exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 91,
    "end_line": 110,
    "content": "output_dir = \"musik\"  # Make sure this directory exists or create it\n\n    # Ensure output directory exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Specify the path to your FFmpeg executable\n    ffmpeg_path = \"C:/ffmpeg-2024-09-19-git-0d5b68c27c-full_build/bin\"  # Change this to your FFmpeg path\n\n    # yt-dlp options\n    ydl_opts = {\n        \"format\": \"bestaudio/best\",\n        \"postprocessors\": [\n            {\n                \"key\": \"FFmpegExtractAudio\",\n                \"preferredcodec\": \"mp3\",\n                \"preferredquality\": \"192\",\n                \"nopostoverwrites\": True,\n            }\n        ],"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 106,
    "end_line": 125,
    "content": "\"preferredcodec\": \"mp3\",\n                \"preferredquality\": \"192\",\n                \"nopostoverwrites\": True,\n            }\n        ],\n        \"ffmpeg_location\": ffmpeg_path,  # Set FFmpeg path\n        \"outtmpl\": os.path.join(\n            output_dir, \"%(title)s.%(ext)s\"\n        ),  # Save the file with the title as the name\n        \"quiet\": True,\n    }\n\n    # Download the MP3\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        try:\n            ydl.download([youtube_url])\n            # After downloading, get the file pat\n            downloaded_file_path = f\"{ydl.prepare_filename({'title': ydl.extract_info(youtube_url, download=False)['title'], 'ext': 'mp3'})}\"\n            return downloaded_file_path  # Return the path of the saved file\n        except yt_dlp.utils.DownloadError as e:"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 121,
    "end_line": 140,
    "content": "ydl.download([youtube_url])\n            # After downloading, get the file pat\n            downloaded_file_path = f\"{ydl.prepare_filename({'title': ydl.extract_info(youtube_url, download=False)['title'], 'ext': 'mp3'})}\"\n            return downloaded_file_path  # Return the path of the saved file\n        except yt_dlp.utils.DownloadError as e:\n            print(f\"Error: {e}\")\n            return None\n\n\n@app.route(\"/download\", methods=[\"POST\"])\ndef download():\n    data = request.get_json()\n    track_name = data[\"song\"]\n    results = YoutubeSearch(f\"{track_name}\", max_results=10).to_json()\n    parsed_data = json.loads(results)\n\n    # Extract video IDs\n    video_ids = [video[\"id\"] for video in parsed_data[\"videos\"]]\n\n    if not video_ids:"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 136,
    "end_line": 155,
    "content": "# Extract video IDs\n    video_ids = [video[\"id\"] for video in parsed_data[\"videos\"]]\n\n    if not video_ids:\n        return jsonify({\"message\": \"No videos found.\"}), 404\n\n    # Download the MP3 and get the saved file path\n\n    file_path = download_mp3(f\"https://www.youtube.com/watch?v={video_ids[0]}\")\n    file_path = file_path.replace(\"\\\\\", \"/\")\n\n    print(file_path)\n    if file_path:\n        # Send the file to the client\n        return send_file(\n            file_path,\n            mimetype=\"audio/mpeg\",\n            as_attachment=True,\n            download_name=os.path.basename(file_path),"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 151,
    "end_line": 170,
    "content": "return send_file(\n            file_path,\n            mimetype=\"audio/mpeg\",\n            as_attachment=True,\n            download_name=os.path.basename(file_path),\n        )\n    else:\n        return jsonify({\"message\": \"Failed to download the audio.\"}), 500\n\n    # buffer.seek(0)  # Go back to the start of the BytesIO buffer\n    # return buffer\n\n\n# results = YoutubeSearch(f'${track_name}', max_results=10).to_json()\n# parsed_data = json.loads(results)\n\n# # Extract video IDs\n# video_ids = [video['id'] for video in parsed_data['videos']]"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 166,
    "end_line": 185,
    "content": "# # Extract video IDs\n# video_ids = [video['id'] for video in parsed_data['videos']]\n\n\n# import yt_dlp\n\n# import os\n\n# def download_mp3(youtube_url, output_dir, ffmpeg_location=\"C:/ffmpeg-2024-09-19-git-0d5b68c27c-full_build/bin\"):\n#     # Ensure output directory exists\n#     if not os.path.exists(output_dir):\n#         os.makedirs(output_dir)\n\n#     # yt-dlp options\n#     ydl_opts = {\n#         'format': 'bestaudio/best',\n#         'postprocessors': [{\n#             'key': 'FFmpegExtractAudio',\n#             'preferredcodec': 'mp3',"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 181,
    "end_line": 200,
    "content": "#     ydl_opts = {\n#         'format': 'bestaudio/best',\n#         'postprocessors': [{\n#             'key': 'FFmpegExtractAudio',\n#             'preferredcodec': 'mp3',\n#             'preferredquality': '192',\n#         }],\n#         'ffmpeg_location': ffmpeg_location,  # Set the ffmpeg location\n#         'outtmpl': os.path.join(output_dir, '%(title)s.%(ext)s'),\n#     }\n\n#     # Download the mp3\n#     with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n#         try:\n#             ydl.download([youtube_url])\n#         except yt_dlp.utils.DownloadError as e:\n#             print(f\"Error: {e}\")\n\n# # Example usage"
  },
  {
    "file": "./cloned_repo2/main.py",
    "start_line": 196,
    "end_line": 210,
    "content": "#         except yt_dlp.utils.DownloadError as e:\n#             print(f\"Error: {e}\")\n\n# # Example usage\n\n# print(video_ids[0])\n# id=video_ids[0]\n# download_mp3(f\"https://www.youtube.com/watch?v={id}\", \"musik\")\n\n\n# print(video_ids)\n\nif __name__ == \"__main__\":\n\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)"
  },
  {
    "file": "./cloned_repo2/README.md",
    "start_line": 1,
    "end_line": 1,
    "content": "# Spotube"
  }
]